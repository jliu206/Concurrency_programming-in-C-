#include <iostream>
#include <mutex>
#include <condition_variable>
#include <vector>
#include <atomic>
using namespace std;

mutex m1;
condition_variable cv1, cv2;
vector<int> vec;
atomic<bool> Lock;

void get(int i) { //each get funciton works on 10 numbers in the vec and then clear the vec if the
	//vec contains 10 numbers
		int k = 0;
		bool done{ false };
		while (!done) {
			bool expected{ false };
			while (!Lock.compare_exchange_strong(expected, true, memory_order_acquire)) { expected = false; }
			//cout << "get " << i << "  before if " << endl;
			if (vec.size() == 10) {
				for (int j = 0; j < 10; j++) {
					k += vec[j] * vec[j];
				}
				cout << " result = " << k << "  by get " << i << endl;
				vec.clear();
				done = true;

			}
			Lock.store(false, memory_order_release);
		}

}

void put(int i) {//each put funciton add a value to the vec if the vec is not full

	
		//cout << " put  " << i << " before while" << endl;
		
	
		bool done(false);
		while (!done) {
			bool expected{ false };
			while (!Lock.compare_exchange_strong(expected, true, memory_order_acquire)) { expected = false; }

			if (vec.size() < 10) {
				int j = rand() % 100 * i;
				vec.push_back(j);
				cout << "put " << i << "  just added value " << j << "  to vec" << endl;
				done = true;
			}
			Lock.store(false, memory_order_release);
			//run--;//**********
		}

//	if (vec.size() != 10) cv2.notify_one();//will this help?

}


int main() {
	Lock.store(false, memory_order_release);

	thread get_thread[4];
	thread put_thread[40];
	for (int i = 0; i < 4; i++) {
		get_thread[i] = thread(get, i);
	}
	for (int i = 0; i < 40; i++) {
		put_thread[i] = thread(put, i);
	}

	for (int i = 0; i < 4; i++) {
		get_thread[i].join();
	}
	for (int i = 0; i < 40; i++) {
		put_thread[i].join();
	}
	return 0;
}