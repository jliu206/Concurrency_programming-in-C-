//Chrono
#pragma warning(disable : 4996) //_CRT_SECURE_NO_WARNINGS
/*
system_clock
steady_clock
high_resolution_clock

duration
time_point

*/

#include <iostream>
#include <list>
#include <functional>
#include <thread>
#include <chrono>
#include <ctime>
using namespace std;

std::thread::id main_thread_id = std::this_thread::get_id();

void is_main_thread() {
	if (main_thread_id == std::this_thread::get_id())
		std::cout << "This is the main thread.\n";
	else
		std::cout << "This is not the main thread.\n";
}


void f1() {

	this_thread::sleep_for(chrono::milliseconds(10));
}


void f2()
{
	std::this_thread::sleep_for(chrono::milliseconds(20));
}


int main() {
	chrono::system_clock::time_point tbegin = chrono::system_clock::now();
	this_thread::sleep_for(chrono::seconds(1));
	this_thread::sleep_until(chrono::system_clock::now() + chrono::seconds(3));
	chrono::system_clock::time_point tend = chrono::system_clock::now();
	chrono::system_clock::duration elapse = tend - tbegin;

	cout << chrono::duration_cast<chrono::microseconds>(elapse).count() << endl;


	cout << chrono::steady_clock::period::num << "/" << chrono::steady_clock::period::den << endl;
	cout << chrono::system_clock::period::num << "/" << chrono::system_clock::period::den << endl;
	cout << chrono::high_resolution_clock::period::num << "/" << chrono::high_resolution_clock::period::den << endl;
	
	cout << this_thread::get_id() << endl;

	chrono::system_clock::duration d1(15);
	cout << d1.count() << endl;
	cout << chrono::duration_cast<chrono::nanoseconds>(d1).count();

	chrono::duration<double, ratio<1, 1000>> d2(10);


	auto start = std::chrono::system_clock::now();
	// Some computation here
	this_thread::sleep_for(chrono::milliseconds(1));
	auto end = std::chrono::system_clock::now();

	chrono::duration<double> elapsed_seconds = end - start;
	time_t end_time = std::chrono::system_clock::to_time_t(end);

	cout << "finished computation at " << std::ctime(&end_time)
		<< "elapsed time: " << elapsed_seconds.count() << "s\n";

	auto timenow =
		chrono::system_clock::to_time_t(chrono::system_clock::now());

	cout << ctime(&timenow) << endl;




	is_main_thread();
	std::thread th(is_main_thread);
	th.join();
	



	thread t11(f1);
	thread t12(f2);

	cout << "thread 11 id: " << t11.get_id() << std::endl;
	cout << "thread 12 id: " << t12.get_id() << std::endl;

	swap(t11, t12);

	cout << "after std::swap(t11, t12):" << std::endl;
	cout << "thread 11 id: " << t11.get_id() << std::endl;
	cout << "thread 12 id: " << t12.get_id() << std::endl;

	swap(t11, t12);

	cout << "after t1.swap(t2):" << std::endl;
	cout << "thread 1 id: " << t11.get_id() << std::endl;
	cout << "thread 2 id: " << t12.get_id() << std::endl;

	t11.join();
	t12.join();





	const auto p0 = chrono::time_point<chrono::system_clock>{};
	const auto p1 = chrono::system_clock::now();
	const auto p2 = p1 - chrono::hours(24);

	time_t epoch_time = chrono::system_clock::to_time_t(p0);
	cout << "epoch: " << ctime(&epoch_time);
	time_t today_time = chrono::system_clock::to_time_t(p1);
	cout << "today: " << ctime(&today_time);

	cout << "hours since epoch: "
		<< chrono::duration_cast<chrono::hours>(
			p1.time_since_epoch()).count()
		<< '\n';
	cout << "yesterday, hours since epoch: "
		<< chrono::duration_cast<chrono::hours>(
			p2.time_since_epoch()).count()
		<< '\n';
	return 0;
}